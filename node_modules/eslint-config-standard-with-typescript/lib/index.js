"use strict";
const eslintrc_json_1 = require("eslint-config-standard/eslintrc.json");
const equivalents = [
    'brace-style',
    'camelcase',
    'indent',
    'no-array-constructor',
    'no-unused-vars',
    'no-useless-constructor',
    'quotes'
];
function fromEntries(iterable) {
    return [...iterable].reduce((obj, [key, val]) => {
        obj[key] = val;
        return obj;
    }, {});
}
module.exports = {
    extends: 'eslint-config-standard',
    plugins: ['@typescript-eslint'],
    overrides: [
        {
            files: ['*.ts', '*.tsx'],
            parser: '@typescript-eslint/parser',
            rules: {
                // TypeScript has this functionality by default:
                'no-undef': 'off',
                // Rules replaced by @typescript-eslint versions:
                ...fromEntries(equivalents.map((name) => [name, 'off'])),
                'no-use-before-define': 'off',
                // @typescript-eslint versions of Standard.js rules:
                ...fromEntries(equivalents.map((name) => [`@typescript-eslint/${name}`, eslintrc_json_1.rules[name]])),
                '@typescript-eslint/no-use-before-define': ['error', {
                        functions: false,
                        classes: false,
                        variables: false,
                        typedefs: false // Only the TypeScript rule has this option.
                    }],
                // Rules exclusive to Standard TypeScript:
                '@typescript-eslint/adjacent-overload-signatures': 'error',
                '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
                '@typescript-eslint/consistent-type-assertions': [
                    'error',
                    {
                        assertionStyle: 'as',
                        objectLiteralTypeAssertions: 'never'
                    }
                ],
                '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
                '@typescript-eslint/explicit-function-return-type': ['error', {
                        allowExpressions: true,
                        allowHigherOrderFunctions: true,
                        allowTypedFunctionExpressions: true,
                        allowDirectConstAssertionInArrowFunctions: true
                    }],
                '@typescript-eslint/member-delimiter-style': [
                    'error',
                    {
                        multiline: { delimiter: 'none' },
                        singleline: { delimiter: 'comma', requireLast: false }
                    }
                ],
                '@typescript-eslint/no-empty-function': 'error',
                '@typescript-eslint/no-empty-interface': 'error',
                '@typescript-eslint/no-extraneous-class': 'error',
                '@typescript-eslint/no-floating-promises': 'error',
                '@typescript-eslint/no-for-in-array': 'error',
                '@typescript-eslint/no-misused-new': 'error',
                '@typescript-eslint/no-misused-promises': 'error',
                '@typescript-eslint/no-namespace': 'error',
                '@typescript-eslint/no-non-null-assertion': 'error',
                '@typescript-eslint/no-this-alias': ['error', { allowDestructuring: true }],
                '@typescript-eslint/no-unnecessary-type-assertion': 'error',
                '@typescript-eslint/no-var-requires': 'error',
                '@typescript-eslint/prefer-function-type': 'error',
                '@typescript-eslint/prefer-readonly': 'error',
                '@typescript-eslint/promise-function-async': 'error',
                '@typescript-eslint/require-array-sort-compare': 'error',
                '@typescript-eslint/require-await': 'error',
                '@typescript-eslint/restrict-plus-operands': 'error',
                '@typescript-eslint/strict-boolean-expressions': 'error',
                '@typescript-eslint/triple-slash-reference': ['error', { lib: 'never', path: 'never', types: 'never' }],
                '@typescript-eslint/type-annotation-spacing': 'error'
            }
        }
    ]
};
//# sourceMappingURL=index.js.map